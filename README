HC is a web micro-framework for creating C language CGI web pages.  

This is a rewrite of a tool which was created for an embedded linux system.
Monitoring and configuration was to be done by through web pages.  However,
the system resources were very constrained.  PHP, Java, Apache, and the like
were all considered too heavyweight to be included in the system.

Instead, the web pages were served up by mini_httpd.  The HTML forms and
pages were generated from CGI executables written in C, using an API that 
provided access to system resources.

The project needed a more intuitive way to generate HTML than explicitly
calling printf innumerable times.


WHAT IS A MICRO-FRAMEWORK FOR CREATING C LANGUAGE CGI WEB PAGES

This means is that you can mix HTML with C language in your source files, then
compile your source files into pure C language files which contain statements
to write the HTML to output.

Say you have a source file "test.hc" which contains the following lines:

    #include <stdio.h>
    int main (int argc, char *argv)
    {
      char *title = "HC Test File";
      /***
        <html>
          <head><title><?= title ?></title></head>
          <body>
            <h1>Hello, "World"!</h1>
          </body>
        </html>
      ***/
    }

The command

    hc test.hc test.c

generates a file "test.c" which contains the following lines:

    /*
     * This file was auto-generated by hc.c.  Do not modify by hand.
     */

    #include <stdio.h>
    int main (int argc, char *argv)
    {
      char *title = "HC Test File";

        printf("%s\n", "    <html>");
        printf("%s", "      <head><title>");
        printf("%s",  title );
        printf("%s\n", "</title></head>");
        printf("%s\n", "      <body>");
        printf("%s\n", "        <h1>Hello, \"World\"!</h1>");
        printf("%s\n", "      </body>");
        printf("%s\n", "    </html>");
        printf("%s\n", "  ");
    }

Now, test.c can be compiled into an executable which can be run to produce the
following output:

        <html>
          <head><title>HC Test File</title></head>
          <body>
            <h1>Hello, "World"!</h1>
          </body>
        </html>


FORMAT OF AN HC FILE

The contents of an HC file is both C source code and HTML.  The start of HTML
inside the file is marked by a triple comment /***, and terminated similarly by
***/.  All HTML is converted to printf statements to write the HTML to stdout.
For example,

    void print_doctype() {
      /***
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
            "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
      ***/
    }

is converted to

    void print_doctype() {
        printf("%s\n", "        <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" ");
        printf("%s\n", "            \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
    }

Double quote characters in the HTML source are escaped in the printf statement,
as also are backslash characters.

C and HTML can be mixed freely, and don't need to be on separate lines.  For
example,

    /*** <title> ***/ printf("%s", getTitle()); /*** </title> ***/

becomes

        printf("%s", " <title> ");
       printf("%s", getTitle());
        printf("%s\n", " </title> ");

C language expressions can be embedded in the HTML.  The start of an expression
is marked by <?= and the end of the expression is marked by ?>.  Expressions are also
converted into printf statements.  For example,

    /*** <title><?= getTitle() ?></title> ***/

becomes

    printf("%s", " <title>");
    printf("%s",  getTitle() );
    printf("%s\n", "</title> ");

in the output file.  All expressions are presumed to be string values.


HOW TO USE HC

Okay, so calling HC a compiler is a bit of a stretch, but you get the idea:
your source files will contain mixed C language and HTML;  HC converts your
source files to pure C language files;  these C language are compiled and
linked with the rest of your C source files.

Suppose your HC source file is named "test.hc".  Compile this to a file called,
let's say, "test.c" using the command

    hc test.hc test.c

If the output file is omitted, then the results will be written to stdout.  If
the input file is also omitted, then the source will be read from stdin.  The
command could equivalently have been written

    hc < test.hc > test.c

Then compile "test.c" normally, for example

    gcc -o test.c

Now link the resulting object file into your executable as usual.

A typical makefile rule might look like this:

    .c.hc:
        $(HC) $< $@


HOW TO BUILD HC

Compile hc.c into an executable for your platform.  Copy the executable into
your path.
